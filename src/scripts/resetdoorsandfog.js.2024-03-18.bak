import Logger from "./lib/Logger.js";

// Adds menu option to Scene Nav and Directory
Hooks.on("getSceneNavigationContext", (html, contextOptions) => {
    if (game.settings.get(CONSTANTS.MODULE_ID, "enableResetDoorsAndFog")) {
    contextOptions.push(ResetDoorsAndFog.getContextOption("sceneId"));
    }
});

Hooks.on("getSceneDirectoryEntryContext", (html, contextOptions) => {
    if (game.settings.get(CONSTANTS.MODULE_ID, "enableResetDoorsAndFog")) {
    contextOptions.push(ResetDoorsAndFog.getContextOption(undefined));
    }
});

// Adds Shut All Doors button to Walls Control Layer
Hooks.on("getSceneControlButtons", (controls) => {
    if (game.settings.get(CONSTANTS.MODULE_ID, "enableResetDoorsAndFog")) {
    controls[4]?.tools.splice(controls[4].tools.length - 2, 0, {
        name: "close",
        title: "Close Open Doors",
        icon: "fas fa-door-closed",
        onClick: () => {
        ResetDoorsAndFog.resetDoors(true, game.scenes?.current?.id);
        },
        button: true,
    });
    return controls;
    }
});

export const ResetDoorsAndFog = {
    resetDoorsAndFog: async function (isCurrentScene, id) {
        await ResetDoorsAndFog.resetDoors(isCurrentScene, id);
        await ResetDoorsAndFog.resetFog(isCurrentScene, id);
    },

    resetDoors: async function (isCurrentScene, id) {
        const updates = [];
        if (isCurrentScene) {
            const wallsToUpdate = canvas.walls?.doors.filter((wall) => wall.document.ds === 1);
            for (let i = 0; i < wallsToUpdate.length; i++) {
                const doorControl = wallsToUpdate[i];
                updates.push({ _id: doorControl.id, ds: 0 });
            }
            await canvas.scene?.updateEmbeddedDocuments("Wall", updates);
        } else {
            if (id) {
                const scene = game.scenes?.get(id);
                const scenesToUpdate = scene.data.walls.filter((wall) => wall.document.ds === 1);
                for (let i = 0; i < scenesToUpdate.length; i++) {
                    const sceneToUpdate = scenesToUpdate[i];
                    updates.push({ _id: sceneToUpdate.id, ds: 0 });
                }
                await scene.updateEmbeddedDocuments("Wall", updates);
            }
        }
        Logger.info(`Doors have been shut.`, true);
    },

    resetFog: async function (isCurrentScene, id) {
        if (isCurrentScene) {
            // canvas.sight?.resetFog();

            canvas.fog.reset();
        } else {
            if (id) {
                await SocketInterface.dispatch("modifyDocument", {
                    type: "FogExploration",
                    action: "delete",
                    data: { scene: id },
                    options: { reset: true },
                    parentId: "",
                    parentType: "",
                });
                Logger.info(`Fog of War exploration progress was reset.`, true);
            }
        }
    },

    getContextOption: function (idField) {
        return {
            name: "Reset Doors & Fog",
            icon: '<i class="fas fa-dungeon"></i>',
            condition: (li) => {
                return game.user?.isGM;
            },
            callback: async (li) => {
                let scene;
                if (idField) {
                    scene = game.scenes?.get(li.data(idField));
                } else {
                    scene = game.scenes?.get(li.data("entityId"));
                    if (!scene) {
                        scene = game.scenes?.get(li.data("documentId"));
                    }
                }
                if (!scene) {
                    return;
                }
                const isCurrentScene = scene.id === canvas.scene?.id;
                await ResetDoorsAndFog.resetDoorsAndFog(isCurrentScene, scene.id);
            },
        };
    },
};
